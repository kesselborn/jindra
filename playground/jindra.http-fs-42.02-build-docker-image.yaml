apiVersion: v1
kind: Pod
metadata:
  # generated by jindra
  name: ${MY_NAME}.02-build-docker-image
  annotations:
    jindra.io/debug-container: enable
    jindra.io/services: jindra-debug-container
    jindra.io/inputs: transit
    jindra.io/outputs: transit,registry-image
    jindra.io/outputs-envs: |
      registry-image.params.image=./image.tar


    # generated transparently by jindra IF NOT SET BY USER
    jindra.io/wait-for: build-docker-image

  labels:
    jindra.io/uid: ${MY_UID}
spec:
############# set automatically / if set: validate (jindra generated)
  restartPolicy: Never

############# affinity for faster artifact sync (jindra generated)
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - ${MY_NODE_NAME}

  volumes:
############# jindra-tools (jindra generated)
  - name: jindra-tools
    emptyDir: {}
############# for synchronizing containers ... mainly for out resources (jindra generated)
  - name: jindra-semaphores
    emptyDir: {}

############# transit folder accessible by all containers; for promoting artifacts between stages (jindra generated)
# shared folder for containers in the pod == normal volume
  - name: jindra-resource-transit
    emptyDir: {}
############# image out resource folder (jindra generated from resource definition)
  - name: jindra-resource-registry-image
    emptyDir: {}
############# rsync ssh key (jindra generated)
# rsync -avvz -e "ssh -p 2222 -i rsync -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" . jindra@localhost:~/
  - name: jindra-rsync-ssh-keys
    secret:
      secretName: jindra.http-fs-42.rsync-keys
      defaultMode: 256
      items:
        - key: priv
          path: ./jindra
  initContainers:
############# copy jindra-tools to shared dir, create semaphore files /jindra/tools (jindra generated)
    - name: get-jindra-tools
      image: jindra/tools
      imagePullPolicy: Always
      command:
        - sh
        - -xc
        - |-
          cp /jindra/contrib/* /opt/jindra/bin

          # create a few semaphores which can be used to block outputs
          # until main steps are finished
          touch /var/lock/jindra/steps-running
          touch /var/lock/jindra/outputs-running
          touch /var/lock/jindra/container-build-docker-image
          touch /var/lock/jindra/container-jindra-watcher
          touch /var/lock/jindra/container-jindra-debug-container
          touch /var/lock/jindra/container-jindra-resource-out-transit
          touch /var/lock/jindra/container-jindra-resource-out-registry-image
      volumeMounts:
      - mountPath: /var/lock/jindra
        name: jindra-semaphores
      - mountPath: /opt/jindra/bin
        name: jindra-tools

############# in resource: transit (jindra generated)
    - name: jindra-resource-in-transit
      image: mrsixw/concourse-rsync-resource
      env:
        - {name: "transit.source.server", value: "${MY_IP}" }
        - {name: "transit.source.base_dir", value: "/tmp" }
        - {name: "transit.source.user", value: "root" }
        - {name: "transit.source.disable_version_path", value: "true"}
        - {name: "transit.version", value: "{\"ref\":\"tmp\"}"}
        - {name: "transit.source.private_key", valueFrom: { secretKeyRef: { name: "jindra.http-fs-42.rsync-keys", key: "priv" } } }
      command:
        - /opt/jindra/bin/env-to-json
        - -prefix=transit
        - -semaphore-file=/var/lock/jindra/setting-up-pod
        - /opt/resource/in
        - /jindra/resources/transit
      volumeMounts:
      # transparently generated by jindra
      - mountPath: /jindra/resources/transit
        name: jindra-resource-transit
      - mountPath: /opt/jindra/bin
        name: jindra-tools
        readOnly: true

  containers:
############# job step 01
    - name: build-docker-image
      image: gcr.io/kaniko-project/executor:debug
      args:
        - --context
        - /jindra/resources/transit
        - --tarPath
        - /jindra/resources/registry-image/image.tar
        - --no-push
        - --destination
        - image
      volumeMounts:
      # mount all volumes
      - mountPath: /jindra/resources/transit
        name: jindra-resource-transit
      - mountPath: /jindra/resources/registry-image
        name: jindra-resource-registry-image

############# state watcher for semaphores (jindra generated)
    - name: jindra-watcher
      image: alpine
      env:
        - {name: "JOB_IP", value: "${MY_IP}" }
      args:
        - sh
        - -c
        # generated name, containers == all manual steps or whatever is annotated in 'jindra.io/wait-for'
        - |
          printf "waiting for steps to finish "
          while ! wget -qO- ${MY_IP}:8080/pod/${MY_NAME}.02-build-docker-image?containers=build-docker-image|grep Completed &>/dev/null
          do
            printf "."
            sleep 3
          done
          echo
          rm /var/lock/jindra/steps-running
      volumeMounts:
      # transparently generated by jindra
      - mountPath: /var/lock/jindra
        name: jindra-semaphores
############# debug: created when annotation 'jindra.io/debug: true' is set
    - name: jindra-debug-container
      image: alpine
      env:
        - {name: "JOB_IP", value: "${MY_IP}" }
      args:
        - sh
        - -c
        - sleep 600
      volumeMounts:
      # mount all volumes
      - mountPath: /opt/jindra/bin
        name: jindra-tools
        readOnly: true
      - mountPath: /var/lock/jindra
        name: jindra-semaphores
      - mountPath: /jindra/resources/transit
        name: jindra-resource-transit
      - mountPath: /jindra/resources/registry-image
        name: jindra-resource-registry-image
        #
############# out resource: transit back to job (jindra generated)
    - name: jindra-resource-out-transit
      image: mrsixw/concourse-rsync-resource
      env:
        - {name: "transit.source.server", value: "${MY_IP}" }
        - {name: "transit.source.base_dir", value: "/tmp" }
        - {name: "transit.source.user", value: "root" }
        - {name: "transit.source.disable_version_path", value: "true"}
        - {name: "transit.version", value: "{\"ref\":\"tmp\"}"}
        - {name: "transit.source.private_key", valueFrom: { secretKeyRef: { name: "jindra.http-fs-42.rsync-keys", key: "priv" } } }
      args:
        - /opt/jindra/bin/env-to-json
        - -prefix=transit
        - -semaphore-file=/var/lock/jindra/steps-running
        - /opt/resource/out
        - /jindra/resources/transit
      volumeMounts:
      # transparently generated by jindra
      - mountPath: /jindra/resources/transit
        name: jindra-resource-transit
      - mountPath: /opt/jindra/bin
        name: jindra-tools
        readOnly: true
      - mountPath: /var/lock/jindra
        name: jindra-semaphores
        readOnly: true
############# out resource: image out (generated by jindra)
    - name: jindra-resource-out-registry-image
      image: concourse/registry-image-resource
      env:
        - {name: "registry-image.params.image",      value: "./image.tar" }
        - {name: "registry-image.source.debug",      value: "true" }
        - {name: "registry-image.source.repository", value: "kesselborntests/jindratest" }
        - {name: "registry-image.source.tag",        value: "42" }
        - {name: "registry-image.source.password",   valueFrom: { secretKeyRef: { name: "dockerhub", key: "password" } } }
        - {name: "registry-image.source.username",   valueFrom: { secretKeyRef: { name: "dockerhub", key: "username" } } }
        - {name: "registry-image.params.image",      value: "./image.tar" }
      args:
        - /opt/jindra/bin/env-to-json
        - -prefix=registry-image
        - -semaphore-file=/var/lock/jindra/steps-running
        - /opt/resource/out
        - /jindra/resources/registry-image
      volumeMounts:
      # transparently generated by jindra
      - mountPath: /jindra/resources/registry-image
        name: jindra-resource-registry-image
      - mountPath: /opt/jindra/bin
        name: jindra-tools
        readOnly: true
      - mountPath: /var/lock/jindra
        name: jindra-semaphores
        readOnly: true
