apiVersion: v1
kind: Pod
metadata:
  # generated by jindra
  name: ${MY_NAME}.on-success
  ownerReferences:
    - apiVersion: batch/v1
      kind: Job
      controller: true
      name: ${MY_NAME}
      uid: ${MY_UID}
  annotations:
    jindra.io/inputs: jindra-resource-transit-in
    jindra.io/outputs: jindra-resource-slack-out

    # jindra.io/wait-for: debug

  labels:
    jindra.io/uid: ${MY_UID}
spec:
############# set automatically / if set: validate (jindra generated)
  restartPolicy: Never

############# affinity for faster artifact sync (jindra generated)
  affinity:
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - ${MY_NODE_NAME}

  volumes:
############# transit folder accessible by all containers; for promoting artifacts between stages (jindra generated)
# shared folder for containers in the pod == normal volume
  - name: jindra-transit
    emptyDir: {}
############# image out resource folder (jindra generated from resource definition)
  - name: jindra-slack-resource
    emptyDir: {}
############# for synchronizing containers ... mainly for out resources (jindra generated)
  - name: jindra-semaphores
    emptyDir: {}
############# rsync ssh key (jindra generated)
# rsync -avvz -e "ssh -p 2222 -i rsync -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" . jindra@localhost:~/
  - name: rsync
    secret:
      secretName: rsync-keys-http-fs-run-42
      defaultMode: 256
      items:
        - key: priv
          path: ./jindra
############# jindra-tools (jindra generated)
  - name: jindra-tools
    emptyDir: {}

  initContainers:
############# copy jindra-tools to shared dir, create semaphore files /jindra/tools (jindra generated)
    - name: get-jindra-tools
      image: jindra/tools
      imagePullPolicy: Always
      command:
        - sh
        - -xc
        - |
          cp /jindra/contrib/* /jindra/tools/

          # create a few semaphores which can be used to block outputs
          # until main steps are finished
          touch /jindra/semaphores/steps-running
          touch /jindra/semaphores/outputs-running
      volumeMounts:
      - mountPath: /jindra/tools
        name: jindra-tools
      - mountPath: /jindra/semaphores
        name: jindra-semaphores

############# in resource: transit (jindra generated)
    - name: jindra-resource-transit-in
      image: mrsixw/concourse-rsync-resource
      env:
        - {name: "transit.source.server", value: "${MY_IP}" }
        - {name: "transit.source.base_dir", value: "/tmp" }
        - {name: "transit.source.user", value: "root" }
        - {name: "transit.source.private_key", valueFrom: { secretKeyRef: { name: "rsync-keys-http-fs-run-42", key: "priv" } } }
        - {name: "transit.source.disable_version_path", value: "true" }
        - {name: "transit.version", value: "{ \"ref\": \"tmp\" }" }
      args:
        - /jindra/tools/env-to-json
        - -prefix
        - transit
        - -semaphore-file
        - /jindra/semaphores/setting-up-pod
        - /opt/resource/in
        - /jindra/transit
      volumeMounts:
      # transparently generated by jindra
      - mountPath: /jindra/semaphores
        name: jindra-semaphores
        readOnly: true
      - mountPath: /jindra/transit
        name: jindra-transit
      - mountPath: /jindra/tools
        name: jindra-tools
        readOnly: true

  containers:
############# job step 01
############# debug: created when annotation 'jindra.io/debug: true' is set
    - name: debug
      image: alpine
      env:
        - {name: "JOB_IP", value: "${MY_IP}" }
      args:
        - sh
        - -c
        - sleep 3600
      volumeMounts:
      # mount all volumes
      - mountPath: /jindra/semaphores
        name: jindra-semaphores
      - mountPath: /jindra/resource/slack
        name: jindra-slack-resource
      - mountPath: /jindra/tools
        name: jindra-tools
      - mountPath: /jindra/transit
        name: jindra-transit
        #
############# state watcher for semaphores (jindra generated)
    - name: jindra-watcher
      image: alpine
      env:
        - {name: "JOB_IP", value: "${MY_IP}" }
      args:
        - sh
        - -c
        # generated name, containers == all manual steps or whatever is annotated in 'jindra.io/wait-for'
        - |
          printf "waiting for steps to finish "
          while ! wget -qO- ${MY_IP}:8080/pod/${MY_NAME}.on-success?containers=|grep Completed &>/dev/null
          do
            printf "."
            sleep 3
          done
          echo
          rm /jindra/semaphores/steps-running
      volumeMounts:
      # transparently generated by jindra
      - mountPath: /jindra/semaphores
        name: jindra-semaphores
############# out resource: transit back to job (jindra generated)
    - name: jindra-resource-slack-out
      image: cfcommunity/slack-notification-resource
      env:
        - { name: "slack.source.url",      valueFrom: { secretKeyRef: { name: "slack", key: "webhook_url" } } }
        - { name: "slack.params.channel",  value: "jindra" }
        - { name: "slack.params.username", value: "Alfons" }
        - { name: "slack.params.text", value: "Job succeeded" }
        - { name: "slack.params.icon_emoji", value: ":champagne:" }
        - { name: "slack.params.attachments", value: '[{"color":"#00ff00","text":"hihihi"}]' }
      args:
        - /jindra/tools/env-to-json
        - -prefix
        - slack
        - -semaphore-file
        - /jindra/semaphores/steps-running
        - /opt/resource/out
        - /jindra/resource/slack
      volumeMounts:
      # transparently generated by jindra
      - mountPath: /jindra/semaphores
        name: jindra-semaphores
        readOnly: true
      - mountPath: /jindra/resource/slack
        name: jindra-slack-resource
      - mountPath: /jindra/tools
        name: jindra-tools
        readOnly: true
